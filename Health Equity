{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "2a878234",
   "metadata": {},
   "source": [
    "# HDS5210-2023 Final Project\n",
    "**Anusha Cherupalla**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e5c131c4",
   "metadata": {},
   "source": [
    "Healthcare disparities persist worldwide, reflecting inequities in access, quality, and outcomes, disproportionately affecting marginalized communities and underscoring the urgent need for targeted interventions to achieve health equity.\n",
    "\n",
    "Three distinct datasets, encompassing county-level data for Missouri in 2018, were employed to investigate various metrics of healthcare disparities.\n",
    "- Medicare/Medicaid dual enrollees\n",
    "- Area Deprivation Index\n",
    "- Social Vulnerability Index\n",
    "\n",
    "Analyzing data from Medicare/Medicaid dual enrollees, the Social Vulnerability Index (SVI), and area deprivation at the county level in Missouri for the year 2018 is crucial for identifying and addressing health disparities. By integrating these datasets, the project can pinpoint specific areas where vulnerable populations face barriers to healthcare access, allowing for targeted resource allocation and intervention strategies. Policymakers can use the insights to formulate evidence-based policies that promote health equity, while local health agencies and community organizations can tailor outreach programs to address the unique needs of each county. The analysis facilitates a data-driven approach to decision-making, enabling stakeholders to make informed choices about healthcare resource distribution. Moreover, establishing a baseline in 2018 provides a foundation for ongoing monitoring and evaluation, allowing for the assessment of the effectiveness of interventions and policies over time and ensuring continuous improvement in healthcare outcomes."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "36b03437",
   "metadata": {},
   "source": [
    "## 1. Data Merging, Cleaning, Transformation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a7a63994",
   "metadata": {},
   "source": [
    "### 1-1. Data Sources\n",
    "\n",
    "The following data were retrieved:\n",
    "- Counts of Medicare-Medicaid dual enrollees (including those in Medicare Savings Programs), by eligibility type, who were enrolled in a given month (csv format). Downloaded from Google BigQuery as a local file.\n",
    "- Area Deprivation Index: calculated using 17 different indicators, encompassing income, education, employment, and housing conditions (csv format). Downloaded from Google BigQuery as a local file.\n",
    "- Social Vulnerability Index: which indicates the relative vulnerability of every U.S. Census tract in 2018 (JSON format): https://data.cdc.gov/resource/48va-t53r.json\n",
    "    - About the SVI Data: https://data.cdc.gov/Health-Statistics/Social-Vulnerability-Index-2018-United-States-coun/48va-t53r/about_data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "26759b12",
   "metadata": {},
   "source": [
    "### 1-2. Medicare/Medicaid Dual Enrollees Data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "66228702",
   "metadata": {},
   "source": [
    "**Pseudocode:**\n",
    "\n",
    "Read in the dual dataframe from local file. Convert the 'Date' column to datetime so that the year can be extracted and stored in a separate column, so that we can condense the dataframe to include only the data from 2018. Aggregate the dataframe by the 'FIPS' ccode so that each row is a separate FIPS code and summate the individual parameter values for each FIPS code."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1a31f61c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# read in the dual enrollment file from locally downloaded file\n",
    "import pandas as pd\n",
    "dual = pd.read_csv('/Users/anushacherupalla/Downloads/dual_enrollment')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8404b24d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# convert 'Date' column to datetime type and store year in separate 'Year' column\n",
    "# condense dataframe to include only data in the year 2018\n",
    "dual['Year'] = pd.to_datetime(dual['Date']).dt.year\n",
    "dual = dual[dual['Year'] == 2018]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9dcba2dd",
   "metadata": {},
   "outputs": [],
   "source": [
    "def group_by(df, groupby_column, exclude_columns):\n",
    "    \"\"\"(df, str, list) -> df\n",
    "    This function takes the parameters of a dataframe, a string name for the column to groupby and columns\n",
    "    to exclude in the aggregation to aggregate a dataframe by a certain column.\n",
    "    \"\"\"\n",
    "    return df.groupby(groupby_column).agg(lambda x: x.iloc[0] \n",
    "                  if x.name not in exclude_columns \n",
    "                  else x.iloc[-1]).reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "645b08a4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# store the columns to exclude and use the group_by function to group by FIPS code\n",
    "# so each row is contains information for one county (FIPS)\n",
    "exclude = ['State_Abbr', 'County_Name', 'Date', 'Year']\n",
    "dual = group_by(dual, 'FIPS', exclude)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c6ad435c",
   "metadata": {},
   "source": [
    "### 1-3. Area Deprivation Index Data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "94f587a9",
   "metadata": {},
   "source": [
    "**Pseudocode:**\n",
    "\n",
    "Read in the dual dataframe from local file. Condense the dataframe to include only the data from 2018."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "09e69f10",
   "metadata": {},
   "outputs": [],
   "source": [
    "# read in the adi file from locally downloaded file\n",
    "adi = pd.read_csv(\"/Users/anushacherupalla/Downloads/adi\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "84b3d127",
   "metadata": {},
   "outputs": [],
   "source": [
    "# condense dataframe to include only data in the year 2018\n",
    "adi = adi[adi['year'] == 2018]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dbcd0c42",
   "metadata": {},
   "source": [
    "### 1-4. Merged Dual and ADI Data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9a991e0c",
   "metadata": {},
   "source": [
    "**Pseudocode:**\n",
    "\n",
    "Merge both the dual and adi dataframes by performing an inner join. Drop any redundant columns."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "dbe9ea39",
   "metadata": {},
   "outputs": [],
   "source": [
    "# perform an inner join on both dual and adi dataframes\n",
    "# drop redundant columns\n",
    "dual_adi = pd.merge(adi, dual, left_on='county_fips_code', right_on='FIPS', how='inner')\n",
    "dual_adi = dual_adi.drop(columns=['FIPS', 'Date', 'Year'], axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1b12f412",
   "metadata": {},
   "source": [
    "### 1-5. Social Vulnerability Index Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "c37f07f0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# read in the SVI JSON file using the following link\n",
    "svi = pd.read_json(\"https://data.cdc.gov/resource/48va-t53r.json\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ddb58dd",
   "metadata": {},
   "source": [
    "### 1-6. Merged Dual, ADI, SVI Data and Transformation\n",
    "\n",
    "**Pseudocode:**\n",
    "\n",
    "Perform a left join with the left data being the merged dual_adi dataframe and the right dataframe being the svi dataframe. Then drop the redundant columns to clean up the data. Condense the data only keeping the data from Missouri. Set 'County_Name' as the index. Create a pivot table which shows the count of numeric values and Nan values in each column. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "6117d8da",
   "metadata": {},
   "outputs": [],
   "source": [
    "# perform a left join of dual_adi combined dataframes and the svi dataframe\n",
    "# drop redundant and unnecessary columns\n",
    "df = pd.merge(dual_adi, svi, left_on='county_fips_code', right_on='fips', how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "203d2a99",
   "metadata": {},
   "outputs": [],
   "source": [
    "# condense the combined df to only data in Missouri \n",
    "df_mo = df[df['state_name'] == 'Missouri']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "ab21088c",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/b4/br6hbm31319d4dfd73df5f680000gn/T/ipykernel_73387/853899401.py:16: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df_mo.drop(columns=drop_columns, inplace=True)\n"
     ]
    }
   ],
   "source": [
    "# drop redundant columns\n",
    "drop_columns = [\n",
    "    'fips',\n",
    "    'shape',\n",
    "    'state_fips_code', \n",
    "    'State_Abbr', \n",
    "    'county_name',\n",
    "    'st',\n",
    "    'state_y',\n",
    "    'st_abbr',\n",
    "    'location',\n",
    "    'state_name', \n",
    "    'state_x',\n",
    "    'year']\n",
    "\n",
    "df_mo.drop(columns=drop_columns, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "202e0f57",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_mo.set_index('County_Name', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "91599f60",
   "metadata": {},
   "outputs": [],
   "source": [
    "# identify columns with non-zero values\n",
    "keep_columns = df_mo.columns[df_mo.fillna(0).ne(0).any()]\n",
    "\n",
    "# filter the df to keep only columns with values other than 0.0 or NaN\n",
    "df_mo= df_mo[keep_columns]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "7ea0bca5",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# FUNCTION IT\n",
    "# initialize lists to append to\n",
    "#column_names = []\n",
    "#num_values_list = []\n",
    "#num_nan_list = []\n",
    "\n",
    "# iterate through columns in the df_mo\n",
    "#for column in df_mo.columns:\n",
    "#    num_values = df_mo[column].count()\n",
    "#    num_nan = df_mo[column].isna().sum()\n",
    "    \n",
    "    # append information to initialized lists\n",
    "#    column_names.append(column)\n",
    "#    num_values_list.append(num_values)\n",
    "#    num_nan_list.append(num_nan)\n",
    "\n",
    "# create a new df using the lists\n",
    "#df_columns = pd.DataFrame({\n",
    "#    'Column_Name': column_names,\n",
    "#    'Num_Values': num_values_list,\n",
    "#    'Num_NaN': num_nan_list\n",
    "#})\n",
    "\n",
    "# display the resulting df\n",
    "#df_columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "79e9d375",
   "metadata": {},
   "outputs": [],
   "source": [
    "#def get_column_info(df):\n",
    "#    \"\"\"df1 -> df2\n",
    "#    This function takes a dataframe as input and outputs a different dataframe with each column\n",
    "#    name and the corresponding count of values and NaN values.\n",
    "#    \"\"\"\n",
    "    # initialize lists to append to\n",
    "#    column_names = []\n",
    "#    num_values_list = []\n",
    "#    num_nan_list = []\n",
    "\n",
    "    # iterate through columns in the df_mo\n",
    "#    for column in df.columns:\n",
    "#        num_values = df[column].count()\n",
    "#        num_nan = df[column].isna().sum()\n",
    "\n",
    "        # append information to initialized lists\n",
    "#        column_names.append(column)\n",
    "#        num_values_list.append(num_values)\n",
    "#        num_nan_list.append(num_nan)\n",
    "\n",
    "    # create a new df using the lists\n",
    "#    df_columns = pd.DataFrame({\n",
    "#        'Column_Name': column_names,\n",
    "#        'Num_Values': num_values_list,\n",
    "#        'Num_NaN': num_nan_list\n",
    "#    })\n",
    "\n",
    "#    return df_columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "b22d1e44",
   "metadata": {},
   "outputs": [],
   "source": [
    "#df_columns = get_column_info(df_mo)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "1a4a6b9d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#nan_rows_indices = df_mo[df_mo['e_uninsur'].isna()].index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "a424ee5a",
   "metadata": {},
   "outputs": [],
   "source": [
    "#pivot_df = df_mo.pivot(index='Indicators', columns='County_Name', values=value_column)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "4522d223",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_column_info(df):\n",
    "    \"\"\"df1 -> df2\n",
    "    This function takes a dataframe as input and outputs a pivot table with each column\n",
    "    name and the corresponding count of values and NaN values.\n",
    "    \"\"\"\n",
    "    # initialize lists to append to\n",
    "    column_names = []\n",
    "    num_values_list = []\n",
    "    num_nan_list = []\n",
    "\n",
    "    # iterate through columns in the DataFrame\n",
    "    for column in df.columns:\n",
    "        num_values = df[column].count()\n",
    "        num_nan = df[column].isna().sum()\n",
    "\n",
    "        # append information to initialized lists\n",
    "        column_names.append(column)\n",
    "        num_values_list.append(num_values)\n",
    "        num_nan_list.append(num_nan)\n",
    "\n",
    "    # create a new DataFrame using the lists\n",
    "    df_columns = pd.DataFrame({\n",
    "        'Column_Name': column_names,\n",
    "        'Num_Values': num_values_list,\n",
    "        'Num_NaN': num_nan_list\n",
    "    })\n",
    "\n",
    "    # create a pivot table\n",
    "    df_pivot = df_columns.pivot_table(index='Column_Name', values=['Num_Values', 'Num_NaN'], aggfunc='sum')\n",
    "\n",
    "    return df_pivot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "14d045ae",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_mo_pivot = get_column_info(df_mo)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "33e5b6e7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Num_NaN</th>\n",
       "      <th>Num_Values</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Column_Name</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Other_full</th>\n",
       "      <td>1</td>\n",
       "      <td>114</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Public_Total</th>\n",
       "      <td>0</td>\n",
       "      <td>115</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>QI</th>\n",
       "      <td>11</td>\n",
       "      <td>104</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>QMB_Only</th>\n",
       "      <td>3</td>\n",
       "      <td>112</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>QMB_plus_Full</th>\n",
       "      <td>0</td>\n",
       "      <td>115</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>spl_theme1</th>\n",
       "      <td>54</td>\n",
       "      <td>61</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>spl_theme2</th>\n",
       "      <td>54</td>\n",
       "      <td>61</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>spl_theme3</th>\n",
       "      <td>54</td>\n",
       "      <td>61</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>spl_theme4</th>\n",
       "      <td>54</td>\n",
       "      <td>61</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>spl_themes</th>\n",
       "      <td>54</td>\n",
       "      <td>61</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>107 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "               Num_NaN  Num_Values\n",
       "Column_Name                       \n",
       "Other_full           1         114\n",
       "Public_Total         0         115\n",
       "QI                  11         104\n",
       "QMB_Only             3         112\n",
       "QMB_plus_Full        0         115\n",
       "...                ...         ...\n",
       "spl_theme1          54          61\n",
       "spl_theme2          54          61\n",
       "spl_theme3          54          61\n",
       "spl_theme4          54          61\n",
       "spl_themes          54          61\n",
       "\n",
       "[107 rows x 2 columns]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_mo_pivot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "bb7553e7",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>county_fips_code</th>\n",
       "      <th>area_deprivation_index_percent</th>\n",
       "      <th>QMB_Only</th>\n",
       "      <th>QMB_plus_Full</th>\n",
       "      <th>SLMB_only</th>\n",
       "      <th>SLMB_plus_Full</th>\n",
       "      <th>QI</th>\n",
       "      <th>Other_full</th>\n",
       "      <th>Public_Total</th>\n",
       "      <th>area_sqmi</th>\n",
       "      <th>...</th>\n",
       "      <th>epl_groupq</th>\n",
       "      <th>spl_theme4</th>\n",
       "      <th>rpl_theme4</th>\n",
       "      <th>spl_themes</th>\n",
       "      <th>rpl_themes</th>\n",
       "      <th>e_uninsur</th>\n",
       "      <th>m_uninsur</th>\n",
       "      <th>ep_uninsur</th>\n",
       "      <th>mp_uninsur</th>\n",
       "      <th>e_daypop</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>115.000000</td>\n",
       "      <td>115.000000</td>\n",
       "      <td>112.000000</td>\n",
       "      <td>115.000000</td>\n",
       "      <td>114.000000</td>\n",
       "      <td>111.000000</td>\n",
       "      <td>104.000000</td>\n",
       "      <td>114.000000</td>\n",
       "      <td>115.000000</td>\n",
       "      <td>61.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>61.000000</td>\n",
       "      <td>61.000000</td>\n",
       "      <td>61.000000</td>\n",
       "      <td>61.000000</td>\n",
       "      <td>61.000000</td>\n",
       "      <td>61.000000</td>\n",
       "      <td>61.000000</td>\n",
       "      <td>61.000000</td>\n",
       "      <td>61.000000</td>\n",
       "      <td>6.100000e+01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>29117.713043</td>\n",
       "      <td>61.365217</td>\n",
       "      <td>131.348214</td>\n",
       "      <td>767.756522</td>\n",
       "      <td>150.175439</td>\n",
       "      <td>109.522523</td>\n",
       "      <td>79.740385</td>\n",
       "      <td>309.877193</td>\n",
       "      <td>1529.556522</td>\n",
       "      <td>579.164253</td>\n",
       "      <td>...</td>\n",
       "      <td>0.469515</td>\n",
       "      <td>2.247075</td>\n",
       "      <td>0.396425</td>\n",
       "      <td>6.895490</td>\n",
       "      <td>0.421518</td>\n",
       "      <td>4649.360656</td>\n",
       "      <td>486.508197</td>\n",
       "      <td>10.785246</td>\n",
       "      <td>1.901639</td>\n",
       "      <td>5.148438e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>75.816001</td>\n",
       "      <td>22.658537</td>\n",
       "      <td>233.558554</td>\n",
       "      <td>1531.249980</td>\n",
       "      <td>264.017237</td>\n",
       "      <td>209.290657</td>\n",
       "      <td>128.248923</td>\n",
       "      <td>685.461451</td>\n",
       "      <td>3016.428844</td>\n",
       "      <td>135.230972</td>\n",
       "      <td>...</td>\n",
       "      <td>0.233169</td>\n",
       "      <td>0.524338</td>\n",
       "      <td>0.226439</td>\n",
       "      <td>1.404018</td>\n",
       "      <td>0.217534</td>\n",
       "      <td>9090.743424</td>\n",
       "      <td>423.014878</td>\n",
       "      <td>3.609979</td>\n",
       "      <td>0.949472</td>\n",
       "      <td>1.409583e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>29001.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>26.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>53.000000</td>\n",
       "      <td>266.628523</td>\n",
       "      <td>...</td>\n",
       "      <td>0.072900</td>\n",
       "      <td>1.198400</td>\n",
       "      <td>0.042300</td>\n",
       "      <td>3.868200</td>\n",
       "      <td>0.032500</td>\n",
       "      <td>138.000000</td>\n",
       "      <td>46.000000</td>\n",
       "      <td>4.900000</td>\n",
       "      <td>0.300000</td>\n",
       "      <td>1.357000e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>29058.000000</td>\n",
       "      <td>45.500000</td>\n",
       "      <td>35.000000</td>\n",
       "      <td>209.500000</td>\n",
       "      <td>40.250000</td>\n",
       "      <td>31.000000</td>\n",
       "      <td>25.250000</td>\n",
       "      <td>75.500000</td>\n",
       "      <td>410.500000</td>\n",
       "      <td>474.482756</td>\n",
       "      <td>...</td>\n",
       "      <td>0.301800</td>\n",
       "      <td>1.814000</td>\n",
       "      <td>0.190100</td>\n",
       "      <td>5.805500</td>\n",
       "      <td>0.231200</td>\n",
       "      <td>969.000000</td>\n",
       "      <td>212.000000</td>\n",
       "      <td>8.400000</td>\n",
       "      <td>1.200000</td>\n",
       "      <td>6.923000e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>29115.000000</td>\n",
       "      <td>66.000000</td>\n",
       "      <td>70.000000</td>\n",
       "      <td>384.000000</td>\n",
       "      <td>74.500000</td>\n",
       "      <td>54.000000</td>\n",
       "      <td>44.500000</td>\n",
       "      <td>138.000000</td>\n",
       "      <td>778.000000</td>\n",
       "      <td>563.286663</td>\n",
       "      <td>...</td>\n",
       "      <td>0.472800</td>\n",
       "      <td>2.338100</td>\n",
       "      <td>0.404000</td>\n",
       "      <td>7.064700</td>\n",
       "      <td>0.434100</td>\n",
       "      <td>1965.000000</td>\n",
       "      <td>338.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>1.700000</td>\n",
       "      <td>1.445900e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>29172.000000</td>\n",
       "      <td>78.500000</td>\n",
       "      <td>133.250000</td>\n",
       "      <td>693.500000</td>\n",
       "      <td>143.250000</td>\n",
       "      <td>98.500000</td>\n",
       "      <td>76.250000</td>\n",
       "      <td>247.250000</td>\n",
       "      <td>1363.000000</td>\n",
       "      <td>656.506730</td>\n",
       "      <td>...</td>\n",
       "      <td>0.681900</td>\n",
       "      <td>2.596000</td>\n",
       "      <td>0.546300</td>\n",
       "      <td>8.029500</td>\n",
       "      <td>0.599400</td>\n",
       "      <td>4650.000000</td>\n",
       "      <td>652.000000</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>2.300000</td>\n",
       "      <td>3.941000e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>29510.000000</td>\n",
       "      <td>98.000000</td>\n",
       "      <td>1667.000000</td>\n",
       "      <td>10183.000000</td>\n",
       "      <td>1868.000000</td>\n",
       "      <td>1458.000000</td>\n",
       "      <td>855.000000</td>\n",
       "      <td>5259.000000</td>\n",
       "      <td>20841.000000</td>\n",
       "      <td>927.248011</td>\n",
       "      <td>...</td>\n",
       "      <td>0.893700</td>\n",
       "      <td>3.259900</td>\n",
       "      <td>0.873900</td>\n",
       "      <td>9.335800</td>\n",
       "      <td>0.816200</td>\n",
       "      <td>65873.000000</td>\n",
       "      <td>2505.000000</td>\n",
       "      <td>22.800000</td>\n",
       "      <td>4.500000</td>\n",
       "      <td>1.050779e+06</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows × 105 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       county_fips_code  area_deprivation_index_percent     QMB_Only  \\\n",
       "count        115.000000                      115.000000   112.000000   \n",
       "mean       29117.713043                       61.365217   131.348214   \n",
       "std           75.816001                       22.658537   233.558554   \n",
       "min        29001.000000                        3.000000    13.000000   \n",
       "25%        29058.000000                       45.500000    35.000000   \n",
       "50%        29115.000000                       66.000000    70.000000   \n",
       "75%        29172.000000                       78.500000   133.250000   \n",
       "max        29510.000000                       98.000000  1667.000000   \n",
       "\n",
       "       QMB_plus_Full    SLMB_only  SLMB_plus_Full          QI   Other_full  \\\n",
       "count     115.000000   114.000000      111.000000  104.000000   114.000000   \n",
       "mean      767.756522   150.175439      109.522523   79.740385   309.877193   \n",
       "std      1531.249980   264.017237      209.290657  128.248923   685.461451   \n",
       "min        26.000000    12.000000       12.000000   11.000000    18.000000   \n",
       "25%       209.500000    40.250000       31.000000   25.250000    75.500000   \n",
       "50%       384.000000    74.500000       54.000000   44.500000   138.000000   \n",
       "75%       693.500000   143.250000       98.500000   76.250000   247.250000   \n",
       "max     10183.000000  1868.000000     1458.000000  855.000000  5259.000000   \n",
       "\n",
       "       Public_Total   area_sqmi  ...  epl_groupq  spl_theme4  rpl_theme4  \\\n",
       "count    115.000000   61.000000  ...   61.000000   61.000000   61.000000   \n",
       "mean    1529.556522  579.164253  ...    0.469515    2.247075    0.396425   \n",
       "std     3016.428844  135.230972  ...    0.233169    0.524338    0.226439   \n",
       "min       53.000000  266.628523  ...    0.072900    1.198400    0.042300   \n",
       "25%      410.500000  474.482756  ...    0.301800    1.814000    0.190100   \n",
       "50%      778.000000  563.286663  ...    0.472800    2.338100    0.404000   \n",
       "75%     1363.000000  656.506730  ...    0.681900    2.596000    0.546300   \n",
       "max    20841.000000  927.248011  ...    0.893700    3.259900    0.873900   \n",
       "\n",
       "       spl_themes  rpl_themes     e_uninsur    m_uninsur  ep_uninsur  \\\n",
       "count   61.000000   61.000000     61.000000    61.000000   61.000000   \n",
       "mean     6.895490    0.421518   4649.360656   486.508197   10.785246   \n",
       "std      1.404018    0.217534   9090.743424   423.014878    3.609979   \n",
       "min      3.868200    0.032500    138.000000    46.000000    4.900000   \n",
       "25%      5.805500    0.231200    969.000000   212.000000    8.400000   \n",
       "50%      7.064700    0.434100   1965.000000   338.000000   10.000000   \n",
       "75%      8.029500    0.599400   4650.000000   652.000000   13.000000   \n",
       "max      9.335800    0.816200  65873.000000  2505.000000   22.800000   \n",
       "\n",
       "       mp_uninsur      e_daypop  \n",
       "count   61.000000  6.100000e+01  \n",
       "mean     1.901639  5.148438e+04  \n",
       "std      0.949472  1.409583e+05  \n",
       "min      0.300000  1.357000e+03  \n",
       "25%      1.200000  6.923000e+03  \n",
       "50%      1.700000  1.445900e+04  \n",
       "75%      2.300000  3.941000e+04  \n",
       "max      4.500000  1.050779e+06  \n",
       "\n",
       "[8 rows x 105 columns]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_mo.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b5113fd",
   "metadata": {},
   "source": [
    "## 2 - Data Visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "ae87b61c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "af73de87",
   "metadata": {},
   "source": [
    "### 2.1 - Area Deprivation Index Percent Distribution: MO v. US"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "17134a5d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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O6bPP/9cffv2zdF+4cKF+v333zVs2LBcr5J37dpVbdq00bRp03Tw4MEC1wFcsQyAYmv69OlGklm7dq05e/Zsjke7du1MWFiY0zphYWGmV69ejunY2FhTqlQpM2LECLN8+XKzdOlSM2HCBDNy5EhjjDF79uwxTzzxhJFkFixYYNasWWPWrFljjh07Zowx5j//+Y+RZAYNGmSWLl1qpkyZYq655hpTrVo18/fffzv2M3z4cCPJ/Oc//zFLly41H374oQkNDTVVqlQxLVq0cLRbsWKFkWRCQkLM/fffbxYvXmyWLFliDh8+bP744w/Tv39/M2/ePLNy5UqzZMkS069fP+Ph4WFWrFjh2EZycrKRZMLCwkzHjh3NkiVLzKxZs0zlypVNjRo1TI8ePUzfvn3N119/baZMmWLKlCljOnbseMHzPXv2bCPJtGnTxixatMjExcWZhg0bGm9vb/PDDz8YY4zZsWOHee+994wkM3bsWLNmzRqzdevWC267Ro0apkqVKiYzM9N8++23RpLjOThf9rmpV6+emTNnjvnuu+/Mb7/9ZrZu3WrKli1r6tataz7++GOzbNkyM3ToUOPh4eG0naNHj5revXubTz75xHz33Xdm6dKl5umnnzYeHh5m5syZF6yzV69exs/PL8/lS5cuNZLMq6++6pg3ZswYY7PZTN++fc2SJUvMggULTJMmTYyfn5/TuenVq5fx9vY2oaGhZsyYMWbZsmVm5MiRxtPT03To0KFA5yF72YgRIxxtGzRoYJo1a5aj1i5dupjAwEBz9uxZY4wxq1atMkOHDjWfffaZWbVqlVm4cKG59957jY+Pj/njjz+MMcYcO3bM8bp78cUXHa+HPXv2GGOMGTFihLH+01nQ10iLFi1MxYoVTWRkpJkyZYqJj483AwYMMJIK9NyEhYWZ9u3bO6azXwfh4eHmrrvuMosWLTKLFi0ydevWNeXLlzdHjx51tM0+pnvuucd88cUXZtasWea6664z1apVc3oPOXfunLnrrruMn5+fGTVqlImPjzdTp041ISEhplatWiY9Pd0YY0xWVpZp166dKV++vNm1a5cxxpiPPvrISDJTp0696GMxxpgzZ86YwMBAExwcbIwxBe7z+b2nTJ061dhsNtOyZUszZ84c8+2335pJkyaZAQMGONb/7rvvjLe3t7nllltMXFycWbp0qendu7eRZKZPn57jHFavXt088cQT5ptvvjFTp0415cuXN61atXK027hxo6levbpp0KCBo/9s3Ljxgufj/Pft7GMKDw833bt3N19++aWZO3euCQ0NNZGRkSYzMzPf7WXXmpCQYHr06GEaN27sWDZ58mTj5+dn0tLSTO3atZ3en7P7cmJiYp7bnjRpkpFk5s6dm28NQElAUAKKsex/7PJ7XCgodejQwVx//fX57mfcuHFGkklOTnaan5iYaCQ5fagwxpiff/7ZSDLPP/+8McaYf/75x9jtdtO1a1endmvWrDGScg1Kt9566wWPPzMz05w9e9bcfvvtplOnTo752R8Q69evb86dO+eYP2HCBCPJ3H333U7bGTJkiJHkCH+5OXfunAkODjZ169Z12ubx48dNYGCgadq0aY5j+PTTTy94DMYY8/333xtJZtiwYcaYfz9kRkREmLCwMJOVleXUVpIpW7as+eeff5zm33nnnaZq1ao5jmHQoEGmdOnSOdpnyz6H/fr1Mw0aNLhgrRcKStl9on///sYYY1JSUoynp6d54oknnNodP37cBAUFmS5dujhtW5J5++23ndqOGTPGSDI//vijY15e5yF72flB6Z133jGSTFJSkmNedp8cOnRonseSmZlpzpw5YyIjI81TTz3lmJ+QkJDjQ3I2a1Aq6GvEmH+DkiTz888/O7WtVauWufPOO/OsM1teQalu3bpOH5zXrVvn9EE2u2/fcMMNTv1t165dxsvLy+k9ZO7cuUaS+fzzz532nX1OJk2a5JiXmppqqlataho3bmw2btxofH19zcMPP3zB48g+lnbt2jm+9ElOTnb0j2eeecYYU/A+n9d7yvHjx01AQIBp3rx5jtfZ+aKiokyDBg0cgTpbhw4dTJUqVRzvB9nvx9bn+o033jCSzIEDBxzzrAGkIOcjt6DUrl07p3bz5883ksyaNWvy3d75QSl7W9lfNNx4442md+/eudZ51113GUnm9OnTeW7766+/NpLM66+/XuDjA65U3HoHXAE+/vhjJSQk5Hhk3wKWn8aNG2vLli0aMGCAvvnmmxz3pOdnxYoVkpRjNKbGjRsrOjpay5cvlyStXbtWGRkZ6tKli1O7m2++Oc9bTu67775c50+ZMkU33HCDSpcuLU9PT3l5eWn58uVKTEzM0bZdu3by8Pi/t7Ho6GhJUvv27Z3aZc9PSUnJ40il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YcIEhYWFKTIyUpJUt25dSdLbb7+tXr16ycvLSzVr1lTNmjX1n//8R++++648PDzUtm1b7dq1Sy+99JKqVaump556StK/tz7FxMQoNjZW5cuXV6dOnbR3716NGjVKVapUyREQ8tKhQwe9+uqrGjFihFq0aKGkpCS98sorioiIUGZm5uU5Qf+fh4eH3njjDXXv3l0dOnTQY489poyMDI0bN05Hjx7Va6+9dtHb/O2337Ru3Tr179/f8YH6fM2aNdNbb72ladOm5RuUpH+fm+bNm+uWW25R//79FR4eruPHj2vHjh364osv9N1330n69xwuWLBAAwYM0P333689e/bo1VdfVZUqVbR9+/YC1Z2VleX4/UdGRoZSUlL09ddfa/78+YqOjnYaNjk8PFyvvPKKXnjhBf3555+66667VL58ef31119at26d/Pz8NGrUKEd7b29vvfXWWzpx4oRuvPFGrV69WqNHj1bbtm0L9Ju7vJQqVUo9e/bU+PHjFRAQoM6dO+e4NbVDhw6aMWOGoqKiVK9ePW3YsEHjxo3LcSXo2muvlY+Pj2bPnq3o6GiVKVNGwcHBToEiW0FfI+7k4eGhV199VY888og6deqkRx99VEePHtXIkSNzfNjt1q2bZs+erXbt2mnw4MFq3LixvLy8tHfvXq1YsUL33HOPOnXqpAMHDjj+jtiIESPk4eGhuLg43XrrrXr22Wc1YcKES667oH0+L2XKlNFbb72lRx55RK1bt9ajjz6qypUra8eOHdqyZYsmTpwoSXr//ffVtm1b3Xnnnerdu7dCQkL0zz//KDExURs3btSnn3560bXXrVtX8+bNU1xcnKpXr67SpUs73mfdpSDvYaVKldLnn3+uO+64Q02aNNHQoUPVpEkTZWRk6IsvvtAHH3ygFi1a6K233iqCioFiwN2jSQDI2/kjF+Wmffv2Fxz17q233jJNmzY1lSpVcgzN3K9fP8eQvtmGDx9ugoODjYeHh5HkGI773Llz5vXXXzc1atQwXl5eplKlSubhhx92DJecLSsry4wePdpUrVrVeHt7m3r16pklS5aY+vXrO41Yl9+IcRkZGebpp582ISEhpnTp0uaGG24wixYtMr169XI6zuzRvsaNG+e0fl7bvtB5PN+iRYvMTTfdZEqXLm38/PzM7bffbn766acC7ccqe7S9zZs359lm2LBhRpLZ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z1qSk5ONJLNp06YcyxYuXGgkmZ9//tkYY8zSpUtNQECAmTFjhtm5c6dZtmyZCQ8PNyNHjnSsI8lUrFjRfPjhhyYpKcm8+OKLplSpUub333932l94eLj5/PPPzZ9//mn27dtnpk+fbsqWLevYTsOGDc2LL77oVE/Dhg3N8OHDC3Ssx48fN126dDF33XWXOXDggDlw4IDJyMjIcbx79+41vr6+ZsCAASYxMdEsXLjQVKpUyYwYMcKx3xYtWpiAgAAzcuRIs23bNjNz5kxjs9nMsmXL8jyvI0aMMPXr13dM9+rVywQEBJjHH3/cJCYmmi+++ML4+vqaDz74wNGmbdu2pk6dOmb16tVm/fr1pmnTpsbHx8f897//NcYYk5WVZZo1a2Y6duxoEhISzLZt28zQoUNNxYoVzeHDh40xxnz55ZfGy8vLJCQkmOPHj5vrrrvODB48OM86s5+zhQsXOs0LCAgwQ4cONSdPnjSRkZGmb9++5pdffjG///67eeihh0zNmjVNRkaG49jKlCljevToYX777Tfz66+/muPHj5vq1aubW265xfzwww9m+/btJi4uzqxevdoYU/C+VLVqVTNnzhyzfft28+STT5oyZcqYw4cPm8zMTPP5558bSSYpKckcOHDAHD16NN/jBIDLjaAEAJeoadOmZsKECcYYY86ePWsqVapk4uPjHcuzg9KiRYsc806cOGFKly7t+KCZrV+/fubBBx/Mc18DBgww9913X57L8wtKiYmJRpIjfNxyyy1m7NixTm0++eQTU6VKFce0JPP44487tbnppptM//79nfaXffzZrEFp/Pjxpnr16o7ppKQkI8ls3bq1wMfaq1cvc8899+R7vM8//7ypWbOmU1B97733TJkyZcy5c+eMMf8GpebNmztt58YbbzTPPfdcnrXkFpTCwsJMZmamY94DDzxgunbt6nR8a9eudSzPPv/ZQWn58uUmICDAnD592mlf1157rXn//fedzkONGjVM9+7dTZ06dcypU6fyrNMY56B0+vRp8+qrrxpJ5quvvjLTpk3LcX4yMjKMj4+P+eabbxzHVrlyZUdwMsaY999/3/j7+zsCnFVB+9L5YfnEiRPGZrOZr7/+2hjzf6+TI0eO5Ht8AFBUuKkbAC5BUlKS1q1b5/ixvKenp7p27aqPPvpIrVu3dmrbqFEjx////vvvOn36tO644w6nNmfOnFGDBg0c01OmTNHUqVO1e/dunTp1SmfOnCn0oALGGEn/3gIlSRs2bFBCQoLGjBnjaHPu3DmdPn1a6enp8vX1lSQ1adLEaTtNmjTJMcrc+ceWm27duumZZ57R2rVrdfPNN2v27Nm6/vrrVatWLZcea2Jiopo0aeI4Rklq1qyZTpw4ob179yo0NFSSVK9ePaf1qlSpokOHDl3UvmrXrq1SpUo5bePXX3911OHp6el0XqKiopxGAtywYYNOnDihihUrOm331KlT2rlzp2P6zTffVJ06dTR//nytX79epUuXvmBtDz74oEqVKqVTp06pbNmyevPNN9W2bVsNHDhQO3bskL+/v1P706dPO+2zbt268vb2dkxv3rxZDRo0UIUKFXLdX0H70vnn3c/PT/7+/hd93gGgqBCUAOASTJs2TZmZmQoJCXHMM8bIy8tLR44cUfny5R3z/fz8HP+flZUlSfryyy+d1pUku90uSZo/f76eeuopvfXWW2rSpIn8/f01btw4p9+FXIzExERJUkREhKOGUaNGqXPnzjnaXujD+PlBRHI+ttxUqVJFrVq10pw5c3TzzTdr7ty5euyxxxzLXXWsxpgctVkDoiR5eXnlOJ7s56Sg8ttGbvu0ysrKUpUqVbRy5cocy84PVH/++af279+vrKws7d69O0fIy81///tftW7dWgEBAU6DamRlZalhw4a5/l7qmmuucfy/9fn08fHJd38F7UuuOO8AUFQISgBQSJmZmfr444/11ltvqU2bNk7L7rvvPs2ePVuDBg3Kdd1atWrJbrcrJSVFLVq0yLXNDz/8oKZNm2rAgAGOeed/638xsrKy9M477ygiIsJxxeqGG25QUlKSrrvuunzXXbt2rXr27Ok0ff5Vr4Lq3r27nnvuOT344IPauXOnunXr5lhWkGP19vZ2GogiN7Vq1dLnn3/uFJhWr14tf3//HIH0coqOjlZmZqbWr1+vxo0bS/r36uP5Q1/fcMMNOnjwoDw9PRUeHp7rds6cOaPu3bura9euioqKUr9+/fTrr7+qcuXK+e4/KCgo1+f1hhtuUFxcnGPwiIKqV6+epk6dqn/++SfXq0oF7Uv5yb6CdaHnGACKCqPeAUAhLVmyREeOHFG/fv1Up04dp8f999+vadOm5bmuv7+/nn76aT311FOaOXOmdu7cqU2bNum9997TzJkzJUnXXXed1q9fr2+++Ubbtm3TSy+9pISEhALVdvjwYR08eFB//vmnFi9erNatW2vdunWaNm2a43axl19+WR9//LFGjhyprVu3KjExUXFxcXrxxRedtvXpp5/qo48+0rZt2zRixAitW7cuzwCYn86dOystLU39+/dXq1atnIJLQY41PDxcv/zyi5KSkpSamuo0wly2AQMGaM+ePXriiSf0xx9/6H//+59GjBihmJgYeXgU3T95NWvW1F133aVHH31UP//8szZs2KBHHnnE6cpM69at1aRJE91777365ptvtGvXLq1evVovvvii1q9fL0l64YUXdOzYMb3zzjt69tlnFR0drX79+hW6ru7du6tSpUq655579MMPPyg5OVmrVq3S4MGDtXfv3jzXe/DBBxUUFKR7771XP/30k/788099/vnnjiHHC9qX8hMWFiabzaYlS5bo77//1okTJwp9nADgCgQlACikadOmqXXr1ipbtmyOZffdd582b96sjRs35rn+q6++qpdfflmxsbGKjo7WnXfeqS+++MJxa9zjjz+uzp07q2vXrrrpppt0+PBhpysu+WndurWqVKmiunXratiwYYqOjtYvv/ziGIJZku68804tWbJE8fHxuvHGG3XzzTdr/PjxCgsLc9rWqFGjNG/ePNWrV08zZ87U7NmznX5bVFABAQHq2LGjtmzZou7duzstK8ixPvroo6pZs6YaNWqka665Rj/99FOOfYSEhOirr77SunXrVL9+fT3++OPq16/fRX1gd5Xp06erWrVqatGihTp37uwYBjybzWbTV199pVtvvVV9+/ZVjRo11K1bN+3atUuVK1fWypUrNWHCBH3yyScKCAiQh4eHPvnkE/3444+aPHlyoWry9fXV999/r9DQUHXu3FnR0dHq27evTp06le8VpuwhyQMDA9WuXTvVrVtXr732miN0F7Qv5SckJESjRo3SsGHDVLly5UKFcQBwJZvJvpEaAAALm82mhQsX6t5773V3KQAAFCmuKAEAAACABUEJAAAAACwY9Q4AkCfuzgYAXK24ogQAAAAAFgQlAAAAALAgKAEAAACABUEJAAAAACwISgAAAABgQVACAAAAAAuCEgAAAABYEJQAAAAAwOL/Ae8k48FvF1/7AAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# create a histogram looking at the distribution of ADI in MO\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.hist(df_mo['area_deprivation_index_percent'].dropna(), bins=20, color='skyblue', edgecolor='black')\n",
    "\n",
    "plt.xlabel('Area Deprivation Index Percent')\n",
    "plt.ylabel('Frequency')\n",
    "plt.title('Histogram of Area Deprivation Index Percent in MO')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "a913ec8f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# create a histogram looking at the distribution of ADI in MO\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.hist(adi['area_deprivation_index_percent'].dropna(), bins=100, color='skyblue', edgecolor='black')\n",
    "\n",
    "plt.xlabel('Area Deprivation Index Percent')\n",
    "plt.ylabel('Frequency')\n",
    "plt.title('Histogram of Area Deprivation Index Percent in the US')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "cac115f1",
   "metadata": {},
   "outputs": [],
   "source": [
    "#plot_columns = ['QMB_Only', 'QMB_plus_Full', 'SLMB_only', 'SLMB_plus_Full', 'QDWI', 'QI', 'Other_full', 'Public_Total']\n",
    "\n",
    "#plt.figure(figsize=(12, 8))\n",
    "\n",
    "# FUNCTION IT\n",
    "# filter out outliers based on IQR\n",
    "#filtered_df = df_mo.copy()\n",
    "#for column in plot_columns:\n",
    "#    Q1 = df_mo[column].quantile(0.25)\n",
    "#    Q3 = df_mo[column].quantile(0.75)\n",
    "#    IQR = Q3 - Q1\n",
    "#    lower_bound = Q1 - 1.5 * IQR\n",
    "#    upper_bound = Q3 + 1.5 * IQR\n",
    "#    filtered_df = filtered_df[(filtered_df[column] >= lower_bound) & (filtered_df[column] <= upper_bound)]\n",
    "\n",
    "#sns.boxplot(data=filtered_df[plot_columns])\n",
    "\n",
    "#plt.xlabel('Columns')\n",
    "#plt.ylabel('Values')\n",
    "#plt.title('Box and Whisker Plot of Selected Columns (Outliers Removed)')\n",
    "\n",
    "#plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b1911f12",
   "metadata": {},
   "source": [
    "def filter_outliers(df, columns_to_filter):\n",
    "    \"\"\"(df, list) -> df\n",
    "    This function takes a dataframe and a list of columns and outputs a dataframe with the outliers\n",
    "    (based on IQR) removed.\n",
    "    \"\"\"\n",
    "    filtered_df = df.copy()\n",
    "    \n",
    "    for column in columns_to_filter:\n",
    "        Q1 = df[column].quantile(0.25)\n",
    "        Q3 = df[column].quantile(0.75)\n",
    "        IQR = Q3 - Q1\n",
    "        lower_bound = Q1 - 1.5 * IQR\n",
    "        upper_bound = Q3 + 1.5 * IQR\n",
    "        filtered_df = filtered_df[(filtered_df[column] >= lower_bound) & (filtered_df[column] <= upper_bound)]\n",
    "    \n",
    "    return filtered_df\n",
    "    \n",
    "resulted in just 19 rows..."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "75ce5562",
   "metadata": {},
   "source": [
    "column_list = df_mo.columns.tolist()\n",
    "num_column_list = [column for column in column_list if pd.api.types.is_numeric_dtype(df_mo[column])]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7aaa3252",
   "metadata": {},
   "source": [
    "df_no_outliers = filter_outliers(df_mo, num_column_list)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9e406425",
   "metadata": {},
   "source": [
    "### 2.2 - Box and Whisker Plot of Medicare/Medicaid Enrollment Parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "dd372d6c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_columns = ['QMB_Only', 'QMB_plus_Full', 'SLMB_only', 'SLMB_plus_Full','QI', 'Other_full', 'Public_Total']\n",
    "\n",
    "plt.figure(figsize=(12, 8))\n",
    "sns.boxplot(data=df_mo[plot_columns])\n",
    "plt.xlabel('Columns')\n",
    "plt.ylabel('Values')\n",
    "plt.title('Box and Whisker Plot of Medicare/Medicaid Enrollment')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "420b8760",
   "metadata": {},
   "source": [
    "### 2.2 - Relationship between Per Capita Income and Total Enrollees across all Dual Eligible Programs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "f82a81e9",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "#df_mo.columns.tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "fac416df",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10, 6))\n",
    "plt.scatter(df_mo['e_pci'], df_mo['Public_Total'], marker='o', linestyle='-', color='y')\n",
    "plt.title('Relationship between Per Capita Income and Total Enrollees across all Dual Eligible Programs')\n",
    "plt.xlabel('e_pci')\n",
    "plt.ylabel('Public_Total')\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
